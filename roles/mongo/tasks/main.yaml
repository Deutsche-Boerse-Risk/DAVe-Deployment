---

####################
# Install Mongo DB
####################

# Render templates

- name: Generate service account
  template:
    src: mongo.serviceaccount.yaml.j2
    dest: /tmp/mongo.serviceaccount.yaml
    mode: 0744
  become: false

# - name: Generate role
#   template:
#     src: mongo.role.yaml.j2
#     dest: /tmp/mongo.role.yaml
#     mode: 0744
#   become: false
#
# - name: Generate role binding
#   template:
#     src: mongo.rolebinding.yaml.j2
#     dest: /tmp/mongo.rolebinding.yaml
#     mode: 0744
#   become: false

- name: Generate service
  template:
    src: mongo.service.yaml.j2
    dest: /tmp/mongo.service.yaml
    mode: 0744
  become: false
  when:
    - dabatase_url is undefined

- name: Generate stateful set
  template:
    src: mongo.statefulset.yaml.j2
    dest: /tmp/mongo.statefulset.yaml
    mode: 0744
  become: false
  when:
    - dabatase_url is undefined

# Add service account

- name: Find out if service account already exists
  command: "kubectl --namespace {{ namespace }} get serviceaccounts dave-mongo -o json"
  register: get_serviceaccount
  ignore_errors: true

- name: Create the service account
  command: "kubectl --namespace {{ namespace }} create -f /tmp/mongo.serviceaccount.yaml"
  when: get_serviceaccount|failed

- name: Replace the service account
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/mongo.serviceaccount.yaml"
  when: get_serviceaccount|succeeded

# - name: Find out if role already exists
#   command: "kubectl --namespace {{ namespace }} get role dave-mongo -o json"
#   register: get_role
#   ignore_errors: true
#
# - name: Create the role
#   command: "kubectl --namespace {{ namespace }} create -f /tmp/mongo.role.yaml"
#   when: get_role|failed
#
# - name: Replace the role
#   command: "kubectl --namespace {{ namespace }} apply -f /tmp/mongo.role.yaml"
#   when: get_role|succeeded

# - name: Find out if role binding already exists
#   command: "kubectl --namespace {{ namespace }} get rolebinding dave-mongo -o json"
#   register: get_rolebinding
#   ignore_errors: true
#
# - name: Create the role binding
#   command: "kubectl --namespace {{ namespace }} create -f /tmp/mongo.rolebinding.yaml"
#   when: get_rolebinding|failed
#
# - name: Replace the role binding
#   command: "kubectl --namespace {{ namespace }} apply -f /tmp/mongo.rolebinding.yaml"
#   when: get_rolebinding|succeeded

# Add service

- name: Find out if service already exists
  command: "kubectl --namespace {{ namespace }} get service dave-mongo -o json"
  register: get_service
  ignore_errors: true
  when: dabatase_url is undefined

- name: Create the service
  command: "kubectl --namespace {{ namespace }} create -f /tmp/mongo.service.yaml"
  when:
    - get_service|failed
    - dabatase_url is undefined

- name: Replace the service
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/mongo.service.yaml"
  when:
    - get_service|succeeded
    - dabatase_url is undefined

# Add statefulset

- name: Find out if statefulset already exists
  command: "kubectl --namespace {{ namespace }} get statefulset dave-mongo -o json"
  register: get_statefulset
  ignore_errors: true
  when:
    - dabatase_url is undefined

- name: Create the statefulset
  command: "kubectl --namespace {{ namespace }} create -f /tmp/mongo.statefulset.yaml"
  when:
    - dabatase_url is undefined
    - get_statefulset|failed

- name: Replace the statefulset
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/mongo.statefulset.yaml"
  when:
    - dabatase_url is undefined
    - get_statefulset|succeeded

# Make sure the deployment is running before moving forward

- name: Verify that all pods are ready
  shell: kubectl --namespace {{ namespace }} get pods | grep "dave-mongo" | grep "Running" | wc -l
  register: cmd_result
  until: cmd_result.stdout.find('3') != -1
  retries: 20
  delay: 30
