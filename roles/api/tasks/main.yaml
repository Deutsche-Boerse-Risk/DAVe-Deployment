---

####################
# Install DAVe-API
####################

# Render templates

- name: Generate service
  template:
    src: api.service.yaml.j2
    dest: /tmp/api.service.yaml
    mode: 0744
  become: false

- name: Generate connection URL
  set_fact:
    database_connection_url: "mongodb://dave-mongo-0.dave-mongo:27017,dave-mongo-1.dave-mongo:27017,dave-mongo-2.dave-mongo:27017/?replicaSet=rs0"
  when: dabatase_url is undefined

- name: Generate connection URL
  set_fact:
    database_connection_url: "{{ database_url }}"
  when: dabatase_url is defined

- name: Generate config map
  template:
    src: api.config-map.yaml.j2
    dest: /tmp/api.config-map.yaml
    mode: 0744
  become: false

- name: Generate secret
  template:
    src: api.secret.yaml.j2
    dest: /tmp/api.secret.yaml
    mode: 0744
  become: false

- name: Generate service account
  template:
    src: api.serviceaccount.yaml.j2
    dest: /tmp/api.serviceaccount.yaml
    mode: 0744
  become: false

- name: Generate role
  template:
    src: api.role.yaml.j2
    dest: /tmp/api.role.yaml
    mode: 0744
  become: false

- name: Generate role binding
  template:
    src: api.rolebinding.yaml.j2
    dest: /tmp/api.rolebinding.yaml
    mode: 0744
  become: false

- name: Generate deployment
  template:
    src: api.deployment.yaml.j2
    dest: /tmp/api.deployment.yaml
    mode: 0744
  become: false

- name: Generate HPA
  template:
    src: api.autoscaler.yaml.j2
    dest: /tmp/api.autoscaler.yaml
    mode: 0744
  become: false

- name: Render internal SSL template
  template:
    src: dave-api-ssl.json.j2
    dest: "{{ ca_dir }}/dave-api-ssl.json.j2"
    mode: 0744
  become: false

# Generate the internal SSL key

- name: Create the service account
  command: "cfssl gencert -ca ca.pem -ca-key ca-key.pem dave-api.json | cfssljson -bare dave-api"
  args:
    chdir: {{ ca_dir }}

- set_fact:
   dave_api_ssl_key: "{{ ca_dir }}/dave-api-key.pem"
   dave_api_ssl_cert: "{{ ca_dir }}/dave-api.pem"

# Add service account

- name: Find out if service account already exists
  command: "kubectl --namespace {{ namespace }} get serviceaccounts dave-api -o json"
  register: get_serviceaccount
  ignore_errors: true

- name: Create the service account
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.serviceaccount.yaml"
  when: get_serviceaccount|failed

- name: Replace the service account
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.serviceaccount.yaml"
  when: get_serviceaccount|succeeded

- name: Find out if role already exists
  command: "kubectl --namespace {{ namespace }} get role dave-api -o json"
  register: get_role
  ignore_errors: true

- name: Create the role
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.role.yaml"
  when: get_role|failed

- name: Replace the role
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.role.yaml"
  when: get_role|succeeded

- name: Find out if role binding already exists
  command: "kubectl --namespace {{ namespace }} get rolebinding dave-api -o json"
  register: get_rolebinding
  ignore_errors: true

- name: Create the role binding
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.rolebinding.yaml"
  when: get_rolebinding|failed

- name: Replace the role binding
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.rolebinding.yaml"
  when: get_rolebinding|succeeded

# Add service

- name: Find out if service already exists
  command: "kubectl --namespace {{ namespace }} get service dave-api -o json"
  register: get_service
  ignore_errors: true

- name: Create the service
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.service.yaml"
  when: get_service|failed

- name: Replace the service
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.service.yaml"
  when: get_service|succeeded

# Add config-map

- name: Find out if config-map already exists
  command: "kubectl --namespace {{ namespace }} get cm dave-api -o json"
  register: get_cm
  ignore_errors: true

- name: Create the config-map
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.config-map.yaml"
  when: get_cm|failed

- name: Replace the config-map
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.config-map.yaml"
  when: get_cm|succeeded

# Add secret

- name: Find out if secret already exists
  command: "kubectl --namespace {{ namespace }} get secret dave-api -o json"
  register: get_secret
  ignore_errors: true

- name: Create the secret
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.secret.yaml"
  when: get_secret|failed

- name: Replace the secret
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.secret.yaml"
  when: get_secret|succeeded

# Add deployment

- name: Find out if deployment already exists
  command: "kubectl --namespace {{ namespace }} get deployment dave-api -o json"
  register: get_deployment
  ignore_errors: true

- name: Create the deployment
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.deployment.yaml"
  when: get_deployment|failed

- name: Replace the deployment
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.deployment.yaml"
  when: get_deployment|succeeded

# Make sure the deployment is running before moving forward

- name: Verify that all pods are ready
  shell: kubectl --namespace {{ namespace }} get pods | grep "dave-api" | grep "Running" | wc -l
  register: cmd_result
  until: cmd_result.stdout.find('3') != -1
  retries: 20
  delay: 30

# Add autoscaler

- name: Find out if HPA already exists
  command: "kubectl --namespace {{ namespace }} get hpa dave-api -o json"
  register: get_hpa
  ignore_errors: true

- name: Create the HPA
  command: "kubectl --namespace {{ namespace }} create -f /tmp/api.autoscaler.yaml"
  when: get_hpa|failed

- name: Replace the HPA
  command: "kubectl --namespace {{ namespace }} apply -f /tmp/api.autoscaler.yaml"
  when: get_hpa|succeeded

# Create Route53 alias

- name: Get the loadbalancer details
  command: "kubectl --namespace {{ namespace }} get service dave-api -o json"
  register: get_loadbalancer

- set_fact:
    loadbalancer: "{{ get_loadbalancer.stdout | from_json }}"

- set_fact:
    loadbalancer_dns_name: "{{ loadbalancer['status']['loadBalancer']['ingress'][0]['hostname'] }}"

- route53:
    command: create
    zone: "{{ dns_zone }}"
    record: "{{ api_dns }}"
    type: A
    value: "{{ loadbalancer_dns_name }}"
    alias: True
    alias_hosted_zone_id: "{{ elb_hosted_zone }}"
    alias_evaluate_target_health: False
    overwrite: True
